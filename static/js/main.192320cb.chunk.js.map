{"version":3,"sources":["components/Header.js","components/Card.js","components/CardList.js","components/Successfull.js","components/Filters.js","components/FliteredCardList.js","App.js","action.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["header","style","paddingLeft","lineHeight","fontSize","Card","props","className","src","launch","links","mission_patch","alt","color","mission_name","flight_number","mission_id","undefined","launch_year","toString","launch_success","rocket","first_stage","cores","land_success","CardList","robots","map","index","Successfull","Filters","textAlign","year","to","key","FliteredCardList","fetchDetailInfo","endpoint","fetch","then","result","json","console","log","setState","catch","error","state","movieId","this","match","params","yearId","endpointForMovieInfo","Component","App","onRequestRobots","onSearchChange","isPending","exact","path","render","React","connect","requestRobots","dispatch","type","response","data","payload","Boolean","window","location","hostname","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.192320cb.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function header() {\r\n    return (\r\n        <div style={{paddingLeft:\"20px\",lineHeight:\"1.5\",fontSize:\"20px\"}}>\r\n            <h2>SpaceX Launch Programs</h2>\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport \"./Card.css\";\r\n\r\nexport default function Card(props) {\r\n  return (\r\n    <div className=\"card\">\r\n      <img src={props.launch.links.mission_patch} alt=\"Avatar\" />\r\n      <div className=\"container\">\r\n        <h3>\r\n          <b style={{ color: \"blueviolet\" }}>\r\n            {props.launch.mission_name} #{props.launch.flight_number}\r\n          </b>\r\n        </h3>\r\n        <p>\r\n          <b>Mission ids: </b>\r\n          {props.launch.mission_id}{\" \"}\r\n        </p>\r\n        <p>\r\n          <b>Launch Year: </b>\r\n         \r\n          {  (props.launch.launch_year !== undefined && \r\n          props.launch.launch_year !== null)\r\n            ? props.launch.launch_year.toString()\r\n            : \"undefined\"}\r\n        </p>\r\n        <p>\r\n          <b>Successful Launch: </b>\r\n          {  (props.launch.launch_success !== undefined && \r\n          props.launch.launch_success !== null)\r\n            ? props.launch.launch_success.toString()\r\n            : \"undefined\"}\r\n        \r\n        </p>\r\n        <p>\r\n          <b>Successful Landing: </b>\r\n          {(props.launch.rocket.first_stage.cores[0].land_success !== undefined && \r\n          props.launch.rocket.first_stage.cores[0].land_success !== null)\r\n            ? props.launch.rocket.first_stage.cores[0].land_success.toString()\r\n            : \"undefined\"}\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Card  from './Card';\r\nimport './CardList.css'\r\n\r\n\r\nconst CardList = ({ robots }) => {\r\n  \r\n  return (\r\n    <div  className=\"cardList\">\r\n      \r\n        {robots.map((launch, index) => {\r\n          return (\r\n            <Card launch={launch}/>\r\n          );\r\n        })}\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\nimport \"./Successfull.css\";\r\n\r\nfunction Successfull(props) {\r\n  return (\r\n    <div className=\"row\">\r\n      <h4 >Successful {props.header}</h4>\r\n      \r\n      <div className=\"column\">\r\n        <button>true</button>\r\n      </div>\r\n      <div className=\"column\">\r\n        <button>false</button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Successfull;\r\n","import React from \"react\";\r\n\r\n\r\nimport \"./Filters.css\";\r\nimport Successfull from \"./Successfull\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Filters = ({ robots }) => {\r\n  const years = [\r\n    2006,\r\n    2007,\r\n    2008,\r\n    2009,\r\n    2010,\r\n    2011,\r\n    2012,\r\n    2013,\r\n    2014,\r\n    2015,\r\n    2016,\r\n    2017,\r\n    2018,\r\n    2019,\r\n    2020,\r\n  ];\r\n  return (\r\n    <div className=\"filter\">\r\n      <h3>Filters</h3>\r\n      <h5 style={{ textAlign: \"center\" }}>Launch Year</h5>\r\n      <hr></hr>\r\n      {years.map((year,index) => (\r\n       <Link to={`/launchYear/${year}`}>\r\n       <button key={index} >{year}</button>\r\n       </Link> \r\n        // <Link to=\"/about\" key={index}>{year}</Link>\r\n      ))}\r\n\r\n      <Successfull header={\"Launch\"} />\r\n      <Successfull header={\"Landing\"} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filters;\r\n","import React, { Component } from 'react';\r\nimport Card  from './Card';\r\nimport './CardList.css'\r\n\r\n\r\nexport default class FliteredCardList extends Component {\r\n    robots;\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = { robots: [] };\r\n      }\r\n    componentDidMount(){\r\n        const movieId=this.props.match.params.yearId\r\n        console.log(movieId);\r\n        let endpointForMovieInfo = `https://api.spacexdata.com/v3/launches?limit=100&launch_year=${movieId}`;\r\n        this.fetchDetailInfo(endpointForMovieInfo)\r\n    }\r\n\r\n     fetchDetailInfo = (endpoint) => {\r\n\r\n        fetch(endpoint)\r\n            .then(result => result.json())\r\n            .then(result => {\r\n                console.log(result);\r\n               \r\n                this.setState({robots:result})\r\n\r\n            })\r\n            .catch(error => console.error('Error:', error)\r\n            )\r\n    }\r\n    render() {\r\n        \r\n        return (\r\n            <div  className=\"cardList\">\r\n      \r\n            {this.state.robots.map((launch, index) => {\r\n              return (\r\n                <Card launch={launch}/>\r\n              );\r\n            })}\r\n          \r\n        </div>\r\n        )\r\n    }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport CardList from \"./components/CardList\";\nimport Filters from \"./components/Filters\";\nimport { connect } from \"react-redux\";\nimport { Router, Route, Switch } from \"react-router\";\n\nimport { requestRobots } from \"./action\";\nimport FliteredCardList from \"./components/FliteredCardList\";\n\nclass App extends React.Component {\n  componentDidMount() {\n    // fetch(\"https://jsonplaceholder.typicode.com/users\")\n    //   .then((resopnse) => resopnse.json())\n    //   .then((users) => {\n    //     this.setState({ robots: users });\n    //   });\n\n    this.props.onRequestRobots();\n  }\n  render() {\n    const { onSearchChange, robots, isPending } = this.props;\n    return (\n      <div>\n        <div className=\"App\">\n          <Header />\n          <div className=\"left-menu\">\n            <Filters></Filters>\n          </div>\n          <div className=\"right-menu\">\n            <Switch>\n              <Route\n                exact\n                path=\"/\"\n                render={(props) => <CardList {...props} robots={robots} />}\n              />\n              <Route\n                \n                path=\"/launchYear/:yearId\"\n                render={(props) => <FliteredCardList {...props}  />}\n              />\n             \n            </Switch>\n            \n          </div>\n\n          <div className=\"footer\">\n            <p>\n              <b>Developed By: </b>Swadhin Nayak\n            </p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nconst mapStateToProps = (state) => {\n  return {\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onRequestRobots: () => dispatch(requestRobots()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {\r\n   \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n  } from './constants';\r\n  \r\n\r\n  \r\n  export const requestRobots =()=> (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n  \r\n    fetch('https://api.spacexdata.com/v3/launches?limit=100')\r\n        .then((response) => response.json())\r\n        .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n        .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n  }\r\n\r\n    \r\n  export const requestSuccessfullLaunch =()=> (dispatch) =>{\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n  \r\n    fetch('https://api.spacexdata.com/v3/launches?limit=100&amp;launch_success=true')\r\n        .then((response) => response.json())\r\n        .then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n        .catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n  }","export const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    \r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED,\r\n  } from \"./constants\";\r\n\r\n  \r\n  const initialStateRobots ={\r\n      isPending:false,\r\n      robots: [],\r\n      error:''\r\n      \r\n  \r\n  }\r\n  \r\n  export const requestRobots = (state = initialStateRobots, action = {}) => {\r\n     \r\n    switch (action.type) {\r\n      case REQUEST_ROBOTS_PENDING:\r\n        return Object.assign({}, state, { isPending: true });\r\n      case REQUEST_ROBOTS_SUCCESS:\r\n        return Object.assign({}, state, {\r\n          robots: action.payload,\r\n          isPending: false,\r\n        });\r\n      case REQUEST_ROBOTS_FAILED:\r\n        return Object.assign({}, state, {\r\n          error: action.payload,\r\n          isPending: false,\r\n        });\r\n      default:\r\n        return state;\r\n    }\r\n  };\r\n  ","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { createLogger } from \"redux-logger\";\nimport { requestRobots } from \"./reducers\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ requestRobots });\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <BrowserRouter>\n        <App />\n      </BrowserRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}